{{ include "global.tmpl" }}

{{- define "ssl_policy" }}
    {{- if eq .ssl_policy "Mozilla-Modern" }}
    ssl_protocols TLSv1.3;
    {{- /*
         * This ssl_ciphers directive is not used but necessary to get TLSv1.3 only.
         * see https://serverfault.com/questions/1023766/nginx-with-only-tls1-3-cipher-suites
         */}}
    ssl_ciphers ECDHE-ECDSA-AES256-GCM-SHA384;
    ssl_conf_command Ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256;
    ssl_prefer_server_ciphers off;
    {{- else if eq .ssl_policy "Mozilla-Intermediate" }}
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-CHACHA20-POLY1305';
    ssl_prefer_server_ciphers off;
    {{- else if eq .ssl_policy "Mozilla-Old" }}
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;
    ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA256:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:@SECLEVEL=0';
    ssl_prefer_server_ciphers on;
    {{- else if eq .ssl_policy "AWS-TLS13-1-3-2021-06" }}
    ssl_protocols TLSv1.3;
    {{- /*
         * This ssl_ciphers directive is not used but necessary to get TLSv1.3 only.
         * see https://serverfault.com/questions/1023766/nginx-with-only-tls1-3-cipher-suites
         */}}
    ssl_ciphers ECDHE-ECDSA-AES256-GCM-SHA384;
    ssl_conf_command Ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256;
    ssl_prefer_server_ciphers on;
    {{- else if eq .ssl_policy "AWS-TLS13-1-2-2021-06" }}
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384';
    ssl_prefer_server_ciphers on;
    {{- else if eq .ssl_policy "AWS-TLS13-1-2-Res-2021-06" }}
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384';
    ssl_prefer_server_ciphers on;
    {{- else if eq .ssl_policy "AWS-TLS13-1-2-Ext1-2021-06" }}
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:AES128-GCM-SHA256:AES128-SHA256:AES256-GCM-SHA384:AES256-SHA256';
    ssl_prefer_server_ciphers on;
    {{- else if eq .ssl_policy "AWS-TLS13-1-2-Ext2-2021-06" }}
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:AES128-GCM-SHA256:AES128-SHA256:AES128-SHA:AES256-GCM-SHA384:AES256-SHA256:AES256-SHA';
    ssl_prefer_server_ciphers on;
    {{- else if eq .ssl_policy "AWS-TLS13-1-1-2021-06" }}
    ssl_protocols TLSv1.1 TLSv1.2 TLSv1.3;
    ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:AES128-GCM-SHA256:AES128-SHA256:AES128-SHA:AES256-GCM-SHA384:AES256-SHA256:AES256-SHA:@SECLEVEL=0';
    ssl_prefer_server_ciphers on;
    {{- else if eq .ssl_policy "AWS-TLS13-1-0-2021-06" }}
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;
    ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:AES128-GCM-SHA256:AES128-SHA256:AES128-SHA:AES256-GCM-SHA384:AES256-SHA256:AES256-SHA:@SECLEVEL=0';
    ssl_prefer_server_ciphers on;
    {{- else if eq .ssl_policy "AWS-FS-1-2-Res-2020-10" }}
    ssl_protocols TLSv1.2;
    ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384';
    ssl_prefer_server_ciphers on;
    {{- else if eq .ssl_policy "AWS-FS-1-2-Res-2019-08" }}
    ssl_protocols TLSv1.2;
    ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384';
    ssl_prefer_server_ciphers on;
    {{- else if eq .ssl_policy "AWS-FS-1-2-2019-08" }}
    ssl_protocols TLSv1.2;
    ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA';
    ssl_prefer_server_ciphers on;
    {{- else if eq .ssl_policy "AWS-FS-1-1-2019-08" }}
    ssl_protocols TLSv1.1 TLSv1.2;
    ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:@SECLEVEL=0';
    ssl_prefer_server_ciphers on;
    {{- else if eq .ssl_policy "AWS-FS-2018-06" }}
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:@SECLEVEL=0';
    ssl_prefer_server_ciphers on;
    {{- else if eq .ssl_policy "AWS-TLS-1-2-Ext-2018-06" }}
    ssl_protocols TLSv1.2;
    ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:AES128-GCM-SHA256:AES128-SHA256:AES128-SHA:AES256-GCM-SHA384:AES256-SHA256:AES256-SHA';
    ssl_prefer_server_ciphers on;
    {{- else if eq .ssl_policy "AWS-TLS-1-2-2017-01" }}
    ssl_protocols TLSv1.2;
    ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:AES128-GCM-SHA256:AES128-SHA256:AES256-GCM-SHA384:AES256-SHA256';
    ssl_prefer_server_ciphers on;
    {{- else if eq .ssl_policy "AWS-TLS-1-1-2017-01" }}
    ssl_protocols TLSv1.1 TLSv1.2;
    ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:AES128-GCM-SHA256:AES128-SHA256:AES128-SHA:AES256-GCM-SHA384:AES256-SHA256:AES256-SHA:@SECLEVEL=0';
    ssl_prefer_server_ciphers on;
    {{- else if eq .ssl_policy "AWS-2016-08" }}
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:AES128-GCM-SHA256:AES128-SHA256:AES128-SHA:AES256-GCM-SHA384:AES256-SHA256:AES256-SHA:@SECLEVEL=0';
    ssl_prefer_server_ciphers on;
    {{- else if eq .ssl_policy "AWS-2015-05" }}
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:AES128-GCM-SHA256:AES128-SHA256:AES128-SHA:AES256-GCM-SHA384:AES256-SHA256:AES256-SHA:DES-CBC3-SHA:@SECLEVEL=0';
    ssl_prefer_server_ciphers on;
    {{- else if eq .ssl_policy "AWS-2015-03" }}
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES128-SHA:DHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:AES128-GCM-SHA256:AES128-SHA256:AES128-SHA:AES256-GCM-SHA384:AES256-SHA256:AES256-SHA:DHE-DSS-AES128-SHA:DES-CBC3-SHA:@SECLEVEL=0';
    ssl_prefer_server_ciphers on;
    {{- else if eq .ssl_policy "AWS-2015-02" }}
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES128-SHA:DHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:AES128-GCM-SHA256:AES128-SHA256:AES128-SHA:AES256-GCM-SHA384:AES256-SHA256:AES256-SHA:DHE-DSS-AES128-SHA:@SECLEVEL=0';
    ssl_prefer_server_ciphers on;
    {{- end }}
{{- end }}

{{- define "location" }}
    {{- $vpath := .VPath }}
    {{- $override := printf "/etc/nginx/vhost.d/%s_%s_location_override" .Host (sha1 .Path) }}
    {{- if and (eq .Path "/") (not (exists $override)) }}
        {{- $override = printf "/etc/nginx/vhost.d/%s_location_override" .Host }}
    {{- end }}
    {{- if exists $override }}
    include {{ $override }};
    {{- else }}
        {{- $keepalive := $vpath.keepalive }}
    location {{ .Path }} {
        {{- if eq $vpath.network_tag "internal" }}
        # Only allow traffic from internal clients
        include /etc/nginx/network_internal.conf;
        {{- end }}

        {{ $proto := $vpath.proto }}
        {{ $upstream := $vpath.upstream }}
        {{ $dest := $vpath.dest }}
        {{- if eq $proto "uwsgi" }}
        include uwsgi_params;
        uwsgi_pass {{ trim $proto }}://{{ trim $upstream }};
        {{- else if eq $proto "fastcgi" }}
            {{- if (exists "/etc/nginx/fastcgi.conf") }}
        include fastcgi.conf;
            {{- else if (exists "/etc/nginx/fastcgi_params") }}
        include fastcgi_params;
            {{- else }}
        # neither /etc/nginx/fastcgi.conf nor /etc/nginx/fastcgi_params found, fastcgi won't work
            {{- end }}
        root {{ trim .VhostRoot }};
        fastcgi_pass {{ trim $upstream }};
            {{- if ne $keepalive "disabled" }}
        fastcgi_keep_conn on;
            {{- end }}
        {{- else if eq $proto "grpc" }}
        grpc_pass {{ trim $proto }}://{{ trim $upstream }};
        {{- else if eq $proto "grpcs" }}
        grpc_pass {{ trim $proto }}://{{ trim $upstream }};
        {{- else }}
        proxy_pass {{ trim $proto }}://{{ trim $upstream }}{{ trim $dest }};
        set $upstream_keepalive {{ if ne $keepalive "disabled" }}true{{ else }}false{{ end }};
        {{- end }}

        {{- if (exists (printf "/etc/nginx/htpasswd/%s_%s" .Host (sha1 .Path) )) }}
        auth_basic "Restricted {{ .Host }}{{ .Path }}";
        auth_basic_user_file {{ (printf "/etc/nginx/htpasswd/%s_%s" .Host (sha1 .Path)) }};
        {{- else if (exists (printf "/etc/nginx/htpasswd/%s" .Host)) }}
        auth_basic "Restricted {{ .HostIsRegexp | ternary "access" .Host }}";
        auth_basic_user_file {{ (printf "/etc/nginx/htpasswd/%s" .Host) }};
        {{- end }}

        {{- if (exists (printf "/etc/nginx/vhost.d/%s_%s_location" .Host (sha1 .Path) )) }}
        include {{ printf "/etc/nginx/vhost.d/%s_%s_location" .Host (sha1 .Path) }};
        {{- else if (exists (printf "/etc/nginx/vhost.d/%s_location" .Host)) }}
        include {{ printf "/etc/nginx/vhost.d/%s_location" .Host}};
        {{- else if (exists "/etc/nginx/vhost.d/default_location") }}
        include /etc/nginx/vhost.d/default_location;
        {{- end }}
    }
    {{- end }}
{{- end }}

{{- /* debug "endpoint" location template */}}
{{- define "debug_location" }}
    {{- $debug_paths := dict }}
    {{- range $path, $vpath := .VHost.paths }}
        {{- $tmp_ports := dict }}
        {{- range $port, $containers := $vpath.ports }}
            {{- $tmp_containers := list }}
            {{- range $container := $containers }}
                {{- $tmp_containers = dict "Name" $container.Name | append $tmp_containers }}
            {{- end }}
            {{- $_ := set $tmp_ports $port $tmp_containers }}
        {{- end }}
        {{- $debug_vpath := deepCopy $vpath | merge (dict "ports" $tmp_ports) }}
        {{- $_ := set $debug_paths $path $debug_vpath }}
    {{- end }}
    
    {{- $debug_vhost := deepCopy .VHost }}
    {{- /* If it's a regexp, do not render the Hostname to the response to avoid rendering config breaking characters */}}
    {{- $_ := set $debug_vhost "hostname" (.VHost.is_regexp | ternary "Hostname is a regexp and unsafe to include in the debug response." .Hostname) }}
    {{- $_ := set $debug_vhost "paths" $debug_paths }}

    {{- $debug_response := dict
        "global" .GlobalConfig
        "request" (dict
            "host" "$host"
            "https" "$https"
            "http2" "$http2"
            "http3" "$http3"
            "ssl_cipher" "$ssl_cipher"
            "ssl_protocol" "$ssl_protocol"
        )
        "vhost" $debug_vhost
    }}

    {{- /*
         * The maximum line length in an nginx config is 4096 characters.
         * If we're nearing this limit (with headroom for the rest
         * of the directive), strip vhost.paths from the response.
         */}}
    {{- if gt (toJson $debug_response | len) 4000 }}
        {{- $_ := unset $debug_vhost "paths" }}
        {{- $_ := set $debug_response "warning" "Virtual paths configuration for this hostname is too large and has been stripped from response." }}
    {{- end }}

    location  /nginx-proxy-debug {
        default_type application/json;
        return 200 '{{ toJson $debug_response }}{{ "\\n" }}';
    }
{{- end }}

{{- define "access_log" }}
    {{- when .Enable "access_log /var/log/nginx/access.log vhost;" "" }}
{{- end }}

# If we receive X-Forwarded-Proto, pass it through; otherwise, pass along the
# scheme used to connect to this server
map $http_x_forwarded_proto $proxy_x_forwarded_proto {
    default {{ if $globals.config.trust_downstream_proxy }}$http_x_forwarded_proto{{ else }}$scheme{{ end }};
    '' $scheme;
}

map $http_x_forwarded_host $proxy_x_forwarded_host {
    default {{ if $globals.config.trust_downstream_proxy }}$http_x_forwarded_host{{ else }}$host{{ end }};
    '' $host;
}

# If we receive X-Forwarded-Port, pass it through; otherwise, pass along the
# server port the client connected to
map $http_x_forwarded_port $proxy_x_forwarded_port {
    default {{ if $globals.config.trust_downstream_proxy }}$http_x_forwarded_port{{ else }}$server_port{{ end }};
    '' $server_port;
}

# Include the port in the Host header sent to the container if it is non-standard
map $server_port $host_port {
    default :$server_port;
    80 '';
    443 '';
}

# If the request from the downstream client has an "Upgrade:" header (set to any
# non-empty value), pass "Connection: upgrade" to the upstream (backend) server.
# Otherwise, the value for the "Connection" header depends on whether the user
# has enabled keepalive to the upstream server.
map $http_upgrade $proxy_connection {
    default upgrade;
    '' $proxy_connection_noupgrade;
}
map $upstream_keepalive $proxy_connection_noupgrade {
    # Preserve nginx's default behavior (send "Connection: close").
    default close;
    # Use an empty string to cancel nginx's default behavior.
    true '';
}
# Abuse the map directive (see <https://stackoverflow.com/q/14433309>) to ensure
# that $upstream_keepalive is always defined.  This is necessary because:
#   - The $proxy_connection variable is indirectly derived from
#     $upstream_keepalive, so $upstream_keepalive must be defined whenever
#     $proxy_connection is resolved.
#   - The $proxy_connection variable is used in a proxy_set_header directive in
#     the http block, so it is always fully resolved for every request -- even
#     those where proxy_pass is not used (e.g., unknown virtual host).
map "" $upstream_keepalive {
    # The value here should not matter because it should always be overridden in
    # a location block (see the "location" template) for all requests where the
    # value actually matters.
    default false;
}

# Apply fix for very long server names
server_names_hash_bucket_size 128;

# Default dhparam
{{- if (exists "/etc/nginx/dhparam/dhparam.pem") }}
ssl_dhparam /etc/nginx/dhparam/dhparam.pem;
{{- end }}

# Set appropriate X-Forwarded-Ssl header based on $proxy_x_forwarded_proto
map $proxy_x_forwarded_proto $proxy_x_forwarded_ssl {
    default off;
    https on;
}

gzip_types text/plain text/css application/javascript application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;


{{- /* See https://nginx.org/en/docs/http/ngx_http_log_module.html#log_format for details and variables
     * LOG_FORMAT_ESCAPE sets the escape part of the log format
     * LOG_FORMAT        sets the log format
     */}}
{{- $logEscape := $globals.config.log_format_escape | default "default" | printf "escape=%s" }}
{{- $logFormat := $globals.config.log_format | default `$host $remote_addr - $remote_user [$time_local] "$request" $status $body_bytes_sent "$http_referer" "$http_user_agent" "$upstream_addr"` }}

{{- if $globals.config.enable_json_logs }}
# JSON Logging enabled (via LOG_JSON env variable)
    {{- $logEscape = $globals.config.log_format_escape | default "json" | printf "escape=%s" }}
    {{- $logFormat = $globals.config.log_format | default `{"time_local":"$time_iso8601","client_ip":"$http_x_forwarded_for","remote_addr":"$remote_addr","request":"$request","status":"$status","body_bytes_sent":"$body_bytes_sent","request_time":"$request_time","upstream_response_time":"$upstream_response_time","upstream_addr":"$upstream_addr","http_referrer":"$http_referer","http_user_agent":"$http_user_agent","request_id":"$request_id"}` }}
{{- end }}

log_format vhost {{ $logEscape }} '{{ $logFormat }}';

access_log off;

{{- /* Lower the SSL policy of the http context
    * if at least one vhost use a TLSv1 or TLSv1.1 policy
    * so TLSv1 and TLSv1.1 can be enabled on those vhosts
    */}}
{{- $httpContextSslPolicy := $globals.config.ssl_policy }}
{{- $inUseSslPolicies := groupByKeys $globals.containers "Env.SSL_POLICY" }}
{{- range $tls1Policy := list "AWS-TLS13-1-1-2021-06" "AWS-TLS13-1-0-2021-06" "AWS-FS-1-1-2019-08" "AWS-FS-2018-06" "AWS-TLS-1-1-2017-01" "AWS-2016-08" "AWS-2015-05" "AWS-2015-03" "AWS-2015-02" "Mozilla-Old" }}
    {{- if has $tls1Policy $inUseSslPolicies }}
# Using Mozilla-Old SSL policy on the http context to allow TLSv1 and TLSv1.1
        {{- $httpContextSslPolicy = "Mozilla-Old" }}
        {{- break }}
    {{- end }}
{{- end }}

{{- template "ssl_policy" (dict "ssl_policy" $httpContextSslPolicy) }}
error_log /dev/stderr;

{{- if $globals.config.resolvers }}
resolver {{ $globals.config.resolvers }};
{{- end }}

{{- if (exists "/etc/nginx/proxy.conf") }}
include /etc/nginx/proxy.conf;
{{- else }}
# HTTP 1.1 support
proxy_http_version 1.1;
proxy_set_header Host $host$host_port;
proxy_set_header Upgrade $http_upgrade;
proxy_set_header Connection $proxy_connection;
proxy_set_header X-Real-IP $remote_addr;
proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
proxy_set_header X-Forwarded-Host $proxy_x_forwarded_host;
proxy_set_header X-Forwarded-Proto $proxy_x_forwarded_proto;
proxy_set_header X-Forwarded-Ssl $proxy_x_forwarded_ssl;
proxy_set_header X-Forwarded-Port $proxy_x_forwarded_port;
proxy_set_header X-Original-URI $request_uri;

# Mitigate httpoxy attack (see README for details)
proxy_set_header Proxy "";
{{- end }}

{{- /*
     * If needed, create a catch-all fallback server to send an error code to
     * clients that request something from an unknown vhost.
     *
     * This server must appear first in the generated config because nginx uses
     * the first `server` directive to handle requests that don't match any of
     * the other `server` directives.  An alternative approach would be to add
     * the `default_server` option to the `listen` directives inside this
     * `server`, but some users inject a custom `server` directive that uses
     * `default_server`.  Using `default_server` here would cause nginx to fail
     * to start for those users.  See
     * <https://github.com/nginx-proxy/nginx-proxy/issues/2212>.
     */}}
{{- block "fallback_server" $globals }}
    {{- $globals := . }}
    {{- $http_exists := false }}
    {{- $https_exists := false }}
    {{- $default_http_exists := false }}
    {{- $default_https_exists := false }}
    {{- $http3_enabled := false }}
    {{- range $vhost := $globals.vhosts }}
        {{- $http := ne $vhost.https_method "nohttp" }}
        {{- $https := ne $vhost.https_method "nohttps" }}
        {{- $http_exists = or $http_exists $http }}
        {{- $https_exists = or $https_exists $https }}
        {{- $default_http_exists = or $default_http_exists (and $http $vhost.default) }}
        {{- $default_https_exists = or $default_https_exists (and $https $vhost.default) }}
        {{- $http3_enabled = or $http3_enabled $vhost.http3_enabled }}
    {{- end }}
    {{- $fallback_http := not $default_http_exists }}
    {{- $fallback_https := not $default_https_exists }}
    {{- /*
         * If there are no vhosts at all, create fallbacks for both plain http
         * and https so that clients get something more useful than a connection
         * refused error.
         */}}
    {{- if and (not $http_exists) (not $https_exists) }}
        {{- $fallback_https = true }}
    {{- end }}
    {{- if or $fallback_http $fallback_https }}
server {
    server_name _; # This is just an invalid value which will never trigger on a real hostname.
    server_tokens off;
    {{ template "access_log" (dict "Enable" $globals.config.enable_access_log) }}
    http2 on;
        {{- if $fallback_http }}
    listen {{ $globals.config.external_http_port }}; {{- /* Do not add `default_server` (see comment above). */}}
                {{- if $globals.config.enable_ipv6 }}
    listen [::]:{{ $globals.config.external_http_port }}; {{- /* Do not add `default_server` (see comment above). */}}
                {{- end }}
        {{- end }}
        {{- if $fallback_https }}
    listen {{ $globals.config.external_https_port }} ssl; {{- /* Do not add `default_server` (see comment above). */}}
            {{- if $globals.config.enable_ipv6 }}
    listen [::]:{{ $globals.config.external_https_port }} ssl; {{- /* Do not add `default_server` (see comment above). */}}
            {{- end }}
            {{- if $http3_enabled }}
    http3 on;
    listen {{ $globals.config.external_https_port }} quic reuseport; {{- /* Do not add `default_server` (see comment above). */}}
                {{- if $globals.config.enable_ipv6 }}
    listen [::]:{{ $globals.config.external_https_port }} quic reuseport; {{- /* Do not add `default_server` (see comment above). */}}
                {{- end }}
            {{- end }}
    ssl_session_cache shared:SSL:50m;
    ssl_session_tickets off;
        {{- end }}
        {{- if $globals.config.default_cert_ok }}
    ssl_certificate /etc/nginx/certs/default.crt;
    ssl_certificate_key /etc/nginx/certs/default.key;
        {{- else }}
    # No default certificate found, so reject SSL handshake;
    ssl_reject_handshake on;
        {{- end }}

        {{- if (exists "/usr/share/nginx/html/errors/50x.html") }}
    error_page 500 502 503 504 /50x.html;
    location /50x.html {
        root /usr/share/nginx/html/errors;
        internal;
    }
        {{- end }}
    location ^~ / {
        return 503;
    }
}
    {{- end }}
{{- end }}

{{- range $hostname, $vhost := $globals.vhosts }}
    {{- $default_server := when $vhost.default "default_server" "" }}

    {{- if (eq $vhost.https_method "redirect") }}
server {
    server_name {{ $hostname }};
        {{- if $vhost.server_tokens }}
    server_tokens {{ $vhost.server_tokens }};
        {{- end }}
    {{ template "access_log" (dict "Enable" $globals.config.enable_access_log) }}
    listen {{ $globals.config.external_http_port }} {{ $default_server }};
        {{- if $globals.config.enable_ipv6 }}
    listen [::]:{{ $globals.config.external_http_port }} {{ $default_server }};
        {{- end }}

        {{- if (or $vhost.acme_http_challenge_legacy $vhost.acme_http_challenge_enabled) }}
    # Do not HTTPS redirect Let's Encrypt ACME challenge
    location ^~ /.well-known/acme-challenge/ {
        auth_basic off;
        auth_request off;
        allow all;
        root /usr/share/nginx/html;
        try_files $uri =404;
        break;
    }
        {{- end }}
    
        {{- if $vhost.enable_debug_endpoint }}
            {{ template "debug_location" (dict "GlobalConfig" $globals.config "Hostname" $hostname "VHost" $vhost) }}
        {{- end }}

    location / {
        {{- $redirect_uri := "https://$host$request_uri" }}
        {{- if ne $globals.config.external_https_port "443" }}
            {{- $redirect_uri = printf "https://$host:%s$request_uri" $globals.config.external_https_port }}
        {{- end}}
        if ($request_method ~ (OPTIONS|POST|PUT|PATCH|DELETE)) {
            return {{ $vhost.non_get_redirect }} {{ $redirect_uri }};
        }
        return 301 {{ $redirect_uri }};
    }
}
    {{- end }}

server {
    {{- if $vhost.is_regexp }}
        {{- if or
            (printf "/etc/nginx/vhost.d/%s" $hostname | exists)
            (printf "/etc/nginx/vhost.d/%s_location" $hostname | exists)
            (printf "/etc/nginx/vhost.d/%s_location_override" $hostname | exists)
            (printf "/etc/nginx/htpasswd/%s" $hostname | exists)
        }}
    # https://github.com/nginx-proxy/nginx-proxy/issues/2529#issuecomment-2437609249
    # Support for vhost config file(s) named like a regexp ({{ $hostname }}) has been removed from nginx-proxy.
    # Please name your vhost config file(s) with the sha1 of the regexp instead ({{ $hostname }} -> {{ sha1 $hostname }}) :
    # - /etc/nginx/vhost.d/{{ sha1 $hostname }}
    # - /etc/nginx/vhost.d/{{ sha1 $hostname }}_location
    # - /etc/nginx/vhost.d/{{ sha1 $hostname }}_location_override
    # - /etc/nginx/htpasswd/{{ sha1 $hostname }}
        {{- end }}
    {{- end }}

    server_name {{ $hostname }};
    {{- if $vhost.server_tokens }}
    server_tokens {{ $vhost.server_tokens }};
    {{- end }}
    {{ template "access_log" (dict "Enable" $globals.config.enable_access_log) }}
    {{- if $vhost.http2_enabled }}
    http2 on;
    {{- end }}
    {{- if or (eq $vhost.https_method "nohttps") (eq $vhost.https_method "noredirect") }}
    listen {{ $globals.config.external_http_port }} {{ $default_server }};
        {{- if $globals.config.enable_ipv6 }}
    listen [::]:{{ $globals.config.external_http_port }} {{ $default_server }};
        {{- end }}

        {{- if (and (eq $vhost.https_method "noredirect") $vhost.acme_http_challenge_enabled) }}
    location /.well-known/acme-challenge/ {
        auth_basic off;
        allow all;
        root /usr/share/nginx/html;
        try_files $uri =404;
        break;
    }
        {{- end }}
    {{- end }}
    {{- if ne $vhost.https_method "nohttps" }}
    listen {{ $globals.config.external_https_port }} ssl {{ $default_server }};
        {{- if $globals.config.enable_ipv6 }}
    listen [::]:{{ $globals.config.external_https_port }} ssl {{ $default_server }};
        {{- end }}

        {{- if $vhost.http3_enabled }}
    http3 on;
    add_header alt-svc 'h3=":{{ $globals.config.external_https_port }}"; ma=86400;';
    listen {{ $globals.config.external_https_port }} quic {{ $default_server }};
            {{- if $globals.config.enable_ipv6 }}
    listen [::]:{{ $globals.config.external_https_port }} quic {{ $default_server }};
            {{- end }}
        {{- end }}

        {{- if $vhost.cert_ok }}
            {{- template "ssl_policy" (dict "ssl_policy" $vhost.ssl_policy) }}

    ssl_session_timeout 5m;
    ssl_session_cache shared:SSL:50m;
    ssl_session_tickets off;

    ssl_certificate /etc/nginx/certs/{{ (printf "%s.crt" $vhost.cert) }};
    ssl_certificate_key /etc/nginx/certs/{{ (printf "%s.key" $vhost.cert) }};

            {{- if (exists (printf "/etc/nginx/certs/%s.dhparam.pem" $vhost.cert)) }}
    ssl_dhparam {{ printf "/etc/nginx/certs/%s.dhparam.pem" $vhost.cert }};
            {{- end }}

            {{- if (exists (printf "/etc/nginx/certs/%s.chain.pem" $vhost.cert)) }}
    ssl_stapling on;
    ssl_stapling_verify on;
    ssl_trusted_certificate {{ printf "/etc/nginx/certs/%s.chain.pem" $vhost.cert }};
            {{- end }}

            {{- if (not (or (eq $vhost.https_method "noredirect") (eq $vhost.hsts "off"))) }}
    set $sts_header "";
    if ($https) {
        set $sts_header "{{ trim $vhost.hsts }}";
    }
    add_header Strict-Transport-Security $sts_header always;
            {{- end }}
        {{- else if not $vhost.trust_default_cert | and $globals.config.default_cert_ok }}
    # No certificate found for this vhost, and the default certificate isn't trusted, so reject SSL handshake.
    ssl_reject_handshake on;
        {{- else }}
    # No certificate for this vhost nor default certificate found, so reject SSL handshake.
    ssl_reject_handshake on;
        {{- end }}
    {{- end }}

    {{- $vhostFileName :=  $vhost.is_regexp | ternary (sha1 $hostname) $hostname }}

    {{- if (exists (printf "/etc/nginx/vhost.d/%s" $vhostFileName)) }}
    include {{ printf "/etc/nginx/vhost.d/%s" $vhostFileName }};
    {{- else if (exists "/etc/nginx/vhost.d/default") }}
    include /etc/nginx/vhost.d/default;
    {{- end }}

    {{- if $vhost.enable_debug_endpoint }}
        {{ template "debug_location" (dict "GlobalConfig" $globals.config "Hostname" $hostname "VHost" $vhost) }}
    {{- end }}

    {{- range $path, $vpath := $vhost.paths }}
        {{- template "location" (dict
            "Path" $path
            "Host" $vhostFileName
            "HostIsRegexp" $vhost.is_regexp
            "VhostRoot" $vhost.vhost_root
            "VPath" $vpath
        ) }}
    {{- end }}

    {{- if and (not (contains $vhost.paths "/")) (ne $globals.config.default_root_response "none")}}
    location / {
        return {{ $globals.config.default_root_response }};
    }
    {{- end }}
}
{{- end }}
