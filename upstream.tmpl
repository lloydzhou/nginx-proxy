{{ include "global.tmpl" }}

{{- /*
     * Template used as a function to get a container's IP address.  This
     * template only outputs debug comments; the IP address is "returned" by
     * storing the value in the provided dot dict.
     *
     * The provided dot dict is expected to have the following entries:
     *   - "globals": Global values.
     *   - "container": The container's RuntimeContainer struct.
     *
     * The return value will be added to the dot dict with key "ip".
     */}}
{{- define "container_ip" }}
    {{- $ipv4 := "" }}
    {{- $ipv6 := "" }}
    #     networks:
    {{- range sortObjectsByKeysAsc $.container.Networks "Name" }}
        {{- /*
             * TODO: Only ignore the "ingress" network for Swarm tasks (in case
             * the user is not using Swarm mode and names a network "ingress").
             */}}
        {{- if eq .Name "ingress" }}
    #         {{ .Name }} (ignored)
            {{- continue }}
        {{- end }}
        {{- if eq .Name "host" }}
            {{- /* Handle containers in host nework mode */}}
            {{- if (index $.globals.networks "host") }}
    #         both container and proxy are in host network mode, using localhost IP
                {{- $ipv4 = "127.0.0.1" }}
                {{- continue }}
            {{- end }}
            {{- range sortObjectsByKeysAsc $.globals.CurrentContainer.Networks "Name" }}
                {{- if and . .Gateway (not .Internal) }}
    #         container is in host network mode, using {{ .Name }} gateway IP
                    {{- $ipv4 = .Gateway }}
                    {{- break }}
                {{- end }}
            {{- end }}
            {{- if $ipv4 }}
                {{- continue }}
            {{- end }}
        {{- end }}
        {{- if and (not (index $.globals.networks .Name)) (not $.globals.networks.host) }}
    #         {{ .Name }} (unreachable)
            {{- continue }}
        {{- end }}
        {{- /*
             * Do not emit multiple `server` directives for this container if it
             * is reachable over multiple networks or multiple IP stacks. This avoids 
             * accidentally inflating the effective round-robin weight of a server due
             * to the redundant upstream addresses that nginx sees as belonging to
             * distinct servers.
             */}}
        {{- if or $ipv4 $ipv6 }}
    #         {{ .Name }} (ignored; reachable but redundant)
            {{- continue }}
        {{- end }}
    #         {{ .Name }} (reachable)
        {{- if and . .IP }}
            {{- $ipv4 = .IP }}
        {{- end }}
        {{- if and . .GlobalIPv6Address }}
            {{- $ipv6 = .GlobalIPv6Address }}
        {{- end }}
        {{- if and (empty $ipv4) (empty $ipv6) }}
    #             /!\ No IPv4 or IPv6 for this network!
        {{- end }}
    {{- else }}
    #         (none)
    {{- end }}
    {{ if and $ipv6 $.globals.config.prefer_ipv6_network }}
    #     IPv4 address: {{ if $ipv4 }}{{ $ipv4 }} (ignored; reachable but IPv6 prefered){{ else }}(none usable){{ end }}
    #     IPv6 address: {{ $ipv6 }}
        {{- $_ := set $ "ip" (printf "[%s]" $ipv6) }}
    {{- else }}
    #     IPv4 address: {{ if $ipv4 }}{{ $ipv4 }}{{ else }}(none usable){{ end }}
    #     IPv6 address: {{ if $ipv6 }}{{ $ipv6 }}{{ if $ipv4 }} (ignored; reachable but IPv4 prefered){{ end }}{{ else }}(none usable){{ end }}
        {{- if $ipv4 }}
            {{- $_ := set $ "ip" $ipv4 }}
        {{- else if $ipv6}}
            {{- $_ := set $ "ip" (printf "[%s]" $ipv6) }}
        {{- end }}
    {{- end }}
{{- end }}

{{- /*
     * Template used as a function to get the port of the server in the given
     * container.  This template only outputs debug comments; the port is
     * "returned" by storing the value in the provided dot dict.
     *
     * The provided dot dict is expected to have the following entries:
     *   - "container": The container's RuntimeContainer struct.
     *
     * The return value will be added to the dot dict with key "port".
     */}}
{{- define "container_port" }}
    {{- /* If only 1 port exposed, use that as a default, else 80. */}}
    #     exposed ports (first ten):{{ range $index, $address := (sortObjectsByKeysAsc $.container.Addresses "Port") }}{{ if lt $index 10 }} {{ $address.Port }}/{{ $address.Proto }}{{ end }}{{ else }} (none){{ end }}
    {{- $default_port := when (eq (len $.container.Addresses) 1) (first $.container.Addresses).Port "80" }}
    #     default port: {{ $default_port }}
    {{- $port := eq $.port "default" | ternary $default_port $.port }}
    #     using port: {{ $port }}
    {{- $addr_obj := where $.container.Addresses "Port" $port | first }}
    {{- if and $addr_obj $addr_obj.HostPort }}
    #         /!\ WARNING: Virtual port published on host.  Clients
    #                      might be able to bypass nginx-proxy and
    #                      access the container's server directly.
    {{- end }}
    {{- $_ := set $ "port" $port }}
{{- end }}

{{- define "upstream" }}
    {{- $path := .Path }}
    {{- $vpath := .VPath }}
upstream {{ $vpath.upstream }} {
    {{- $servers := 0 }}
    {{- $loadbalance := $vpath.loadbalance }}
    {{- if $loadbalance }}
    # From the container's loadbalance label:
    {{ $loadbalance }}
    {{- end }}
    {{- range $port, $containers := $vpath.ports }}
        {{- range $container := $containers }}
    # Container: {{ $container.Name }}
            {{- $args := dict "globals" $.globals "container" $container }}
            {{- template "container_ip" $args }}
            {{- $ip := $args.ip }}
            {{- $args = dict "container" $container "path" $path "port" $port }}
            {{- template "container_port" $args }}
            {{- if $ip }}
                {{- $servers = add1 $servers }}
    server {{ $ip }}:{{ $args.port }};
            {{- end }}
        {{- end }}
    {{- end }}
    {{- /* nginx-proxy/nginx-proxy#1105 */}}
    {{- if lt $servers 1 }}
    # Fallback entry
    server 127.0.0.1 down;
    {{- end }}
    {{- $keepalive := $vpath.keepalive }}
    {{- if and (ne $keepalive "disabled") (gt $servers 0) }}
        {{- if eq $keepalive "auto" }}
    keepalive {{ mul $servers 2 }};
        {{- else }}
    keepalive {{ $keepalive }};
        {{- end }}
    {{- end }}
}
{{- end }}

{{- range $hostname, $vhost := $globals.vhosts }}
    {{- $default_server := when $vhost.default "default_server" "" }}

    {{- range $path, $vpath := $vhost.paths }}
        {{ template "upstream" (dict "globals" $globals "Path" $path "VPath" $vpath) }}
    {{- end }}

{{- end }}
