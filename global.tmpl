# nginx-proxy{{ if $.Env.NGINX_PROXY_VERSION }} version : {{ $.Env.NGINX_PROXY_VERSION }}{{ end }}

{{- /*
     * Global values. Values are stored in this map rather than in individual
     * global variables so that the values can be easily passed to embedded
     * templates (Go templates cannot access variables outside of their own
     * scope) and displayed in the debug endpoint output.
     */}}
{{- $globals := dict }}
{{- $_ := set $globals "containers" $ }}
{{- $_ := set $globals "Env" $.Env }}
{{- $_ := set $globals "Docker" $.Docker }}
{{- $_ := set $globals "CurrentContainer" (where $globals.containers "ID" $globals.Docker.CurrentContainerID | first) }}

{{- $config := dict }}
{{- $_ := set $config "nginx_proxy_version" $.Env.NGINX_PROXY_VERSION }}
{{- $_ := set $config "default_cert_ok" (and (exists "/etc/nginx/certs/default.crt") (exists "/etc/nginx/certs/default.key")) }}
{{- $_ := set $config "external_http_port" ($globals.Env.HTTP_PORT | default "80") }}
{{- $_ := set $config "external_https_port" ($globals.Env.HTTPS_PORT | default "443") }}
{{- $_ := set $config "sha1_upstream_name" ($globals.Env.SHA1_UPSTREAM_NAME | default "false" | parseBool) }}
{{- $_ := set $config "default_root_response" ($globals.Env.DEFAULT_ROOT | default "404") }}
{{- $_ := set $config "trust_default_cert" ($globals.Env.TRUST_DEFAULT_CERT | default "true") }}
{{- $_ := set $config "trust_downstream_proxy" ($globals.Env.TRUST_DOWNSTREAM_PROXY | default "true" | parseBool) }}
{{- $_ := set $config "enable_access_log" ($globals.Env.DISABLE_ACCESS_LOGS | default "false" | parseBool | not) }}
{{- $_ := set $config "enable_ipv6" ($globals.Env.ENABLE_IPV6 | default "false" | parseBool) }}
{{- $_ := set $config "prefer_ipv6_network" ($globals.Env.PREFER_IPV6_NETWORK | default "false" | parseBool) }}
{{- $_ := set $config "ssl_policy" ($globals.Env.SSL_POLICY | default "Mozilla-Intermediate") }}
{{- $_ := set $config "enable_debug_endpoint" ($globals.Env.DEBUG_ENDPOINT | default "false") }}
{{- $_ := set $config "hsts" ($globals.Env.HSTS | default "max-age=31536000") }}
{{- $_ := set $config "acme_http_challenge" ($globals.Env.ACME_HTTP_CHALLENGE_LOCATION | default "true") }}
{{- $_ := set $config "enable_http2" ($globals.Env.ENABLE_HTTP2 | default "true") }}
{{- $_ := set $config "enable_http3" ($globals.Env.ENABLE_HTTP3 | default "false") }}
{{- $_ := set $config "enable_http_on_missing_cert" ($globals.Env.ENABLE_HTTP_ON_MISSING_CERT | default "true") }}
{{- $_ := set $config "https_method" ($globals.Env.HTTPS_METHOD | default "redirect") }}
{{- $_ := set $config "non_get_redirect" ($globals.Env.NON_GET_REDIRECT | default "301") }}
{{- $_ := set $config "default_host" $globals.Env.DEFAULT_HOST }}
{{- $_ := set $config "resolvers" $globals.Env.RESOLVERS }}
{{- /* LOG_JSON is a shorthand that sets logging defaults to JSON format */}}
{{- $_ := set $config "enable_json_logs" ($globals.Env.LOG_JSON | default "false" | parseBool) }}
{{- $_ := set $config "log_format" $globals.Env.LOG_FORMAT }}
{{- $_ := set $config "log_format_escape" $globals.Env.LOG_FORMAT_ESCAPE }}

{{- $_ := set $globals "config" $config }}

{{- $_ := set $globals "vhosts" (dict) }}
{{- $_ := set $globals "networks" (dict) }}
# Networks available to the container running docker-gen (which are assumed to
# match the networks available to the container running nginx):
{{- /*
     * Note: $globals.CurrentContainer may be nil in some circumstances due to
     * <https://github.com/nginx-proxy/docker-gen/issues/458>.  For more context
     * see <https://github.com/nginx-proxy/nginx-proxy/issues/2189>.
     */}}
{{- if $globals.CurrentContainer }}
    {{- range sortObjectsByKeysAsc $globals.CurrentContainer.Networks "Name" }}
        {{- $_ := set $globals.networks .Name . }}
#     {{ .Name }}
    {{- else }}
#     (none)
    {{- end }}
{{- else }}
# /!\ WARNING: Failed to find the Docker container running docker-gen.  All
#              upstream (backend) application containers will appear to be
#              unreachable.  Try removing the -only-exposed and -only-published
#              arguments to docker-gen if you pass either of those.  See
#              <https://github.com/nginx-proxy/docker-gen/issues/458>.
{{- end }}

{{- /* Precompute and store some information about vhost that use VIRTUAL_HOST_MULTIPORTS. */}}
{{- range $vhosts_yaml, $containers := groupBy $globals.containers "Env.VIRTUAL_HOST_MULTIPORTS" }}
    {{- /* Print a warning in the config if VIRTUAL_HOST_MULTIPORTS can't be parsed. */}}
    {{- $parsedVhosts := fromYaml $vhosts_yaml }}
    {{- if (empty $parsedVhosts) }}
        {{- $containerNames := list }}
        {{- range $container := $containers }}
            {{- $containerNames = append $containerNames $container.Name }}
        {{- end }}
# /!\ WARNING: the VIRTUAL_HOST_MULTIPORTS environment variable used for {{ len $containerNames | plural "this container" "those containers" }} is not a valid YAML string:
# {{ $containerNames | join ", " }}
        {{- continue }}
    {{- end }}

    {{- range $hostname, $vhost := $parsedVhosts }}
        {{- $vhost_data := get $globals.vhosts $hostname | default (dict) }}
        {{- $paths := $vhost_data.paths | default (dict) }}

        {{- if (empty $vhost) }}
            {{ $vhost = dict "/" (dict) }}
        {{- end }}

        {{- range $path, $vpath := $vhost }}
            {{- if (empty $vpath) }}
                {{- $vpath = dict
                    "dest" ""
                    "port" "default"
                    "proto" "http"
                }}
            {{- end }}

            {{- $dest := $vpath.dest | default "" }}
            {{- $port := $vpath.port | default "default" | toString }}
            {{- $proto := $vpath.proto | default "http" }}

            {{- $path_data := get $paths $path | default (dict) }}
            {{- $path_ports := $path_data.ports | default (dict) }}
            {{- $path_port_containers := get $path_ports $port | default (list) | concat $containers }}
            {{- $_ := set $path_ports $port $path_port_containers }}
            {{- $_ := set $path_data "ports" $path_ports }}
            
            {{- if (not (hasKey $path_data "dest")) }}
                {{- $_ := set $path_data "dest" $dest }}
            {{- end }}

            {{- if (not (hasKey $path_data "proto")) }}
                {{- $_ := set $path_data "proto" $proto }}
            {{- end }}
            
            {{- $_ := set $paths $path $path_data }}
        {{- end }}
        {{- $_ := set $vhost_data "paths" $paths }}
        {{- $_ := set $globals.vhosts $hostname $vhost_data }}
    {{- end }}
{{- end }}

{{- /* Precompute and store some information about vhost that use VIRTUAL_HOST. */}}
{{- range $hostname, $containers := groupByMulti $globals.containers "Env.VIRTUAL_HOST" "," }}
    {{- /* Ignore containers with VIRTUAL_HOST set to the empty string. */}}
    {{- $hostname = trim $hostname }}
    {{- if not $hostname }}
        {{- continue }}
    {{- end }}

    {{- /* Drop containers with both VIRTUAL_HOST and VIRTUAL_HOST_MULTIPORTS set
         * (VIRTUAL_HOST_MULTIPORTS takes precedence thanks to the previous loop).
         */}}
    {{- range $_, $containers_to_drop := groupBy $containers "Env.VIRTUAL_HOST_MULTIPORTS" }}
        {{- range $container := $containers_to_drop }}
            {{- $containers = without $containers $container }}
        {{- end }}
    {{- end }}
    {{- if (eq (len $containers) 0) }}
        {{- continue }}
    {{- end }}

    {{- $vhost_data := get $globals.vhosts $hostname | default (dict) }}
    {{- $paths := $vhost_data.paths | default (dict) }}

    {{- $tmp_paths := groupByWithDefault $containers "Env.VIRTUAL_PATH" "/" }}

    {{- range $path, $containers := $tmp_paths }}
        {{- $dest := groupByKeys $containers "Env.VIRTUAL_DEST" | first | default "" }}
        {{- $proto := groupByKeys $containers "Env.VIRTUAL_PROTO" | first | default "http" | trim }}

        {{- $path_data := get $paths $path | default (dict) }}
        {{- $path_ports := $path_data.ports | default (dict) }}
        {{- range $port, $containers := groupByWithDefault $containers "Env.VIRTUAL_PORT" "default" }}
            {{- $path_port_containers := get $path_ports $port | default (list) | concat $containers }}
            {{- $_ := set $path_ports $port $path_port_containers }}
        {{- end }}
        {{- $_ := set $path_data "ports" $path_ports }}

        {{- if (not (hasKey $path_data "dest")) }}
            {{- $_ := set $path_data "dest" $dest }}
        {{- end }}

        {{- if (not (hasKey $path_data "proto")) }}
            {{- $_ := set $path_data "proto" $proto }}
        {{- end }}
        
        {{- $_ := set $paths $path $path_data }}
    {{- end }}
    {{- $_ := set $vhost_data "paths" $paths }}
    {{- $_ := set $globals.vhosts $hostname $vhost_data }}
{{- end }}

{{- /* Loop over $globals.vhosts and update it with the remaining informations about each vhost. */}}
{{- range $hostname, $vhost_data := $globals.vhosts }}
    {{- $is_regexp := hasPrefix "~" $hostname }}
    {{- $upstream_name := or $is_regexp $globals.config.sha1_upstream_name | ternary (sha1 $hostname) $hostname }}

    {{- $vhost_containers := list }}

    {{- range $path, $vpath_data := $vhost_data.paths }}
        {{- $vpath_containers := list }}
        {{- range $port, $vport_containers := $vpath_data.ports }}
            {{ $vpath_containers = concat $vpath_containers $vport_containers }}
        {{- end }}

        {{- /* Get the NETWORK_ACCESS defined by containers w/ the same vhost, falling back to "external". */}}
        {{- $network_tag := groupByKeys $vpath_containers "Env.NETWORK_ACCESS" | first | default "external" }}

        {{- $loadbalance := groupByLabel $vpath_containers "com.github.nginx-proxy.nginx-proxy.loadbalance" | keys | first }}
        {{- $keepalive := groupByLabel $vpath_containers "com.github.nginx-proxy.nginx-proxy.keepalive" | keys | first | default "auto" }}

        {{- $upstream := $upstream_name }}
        {{- if (not (eq $path "/")) }}
            {{- $sum := sha1 $path }}
            {{- $upstream = printf "%s-%s" $upstream $sum }}
        {{- end }}

        {{- $_ := set $vpath_data "network_tag" $network_tag }}
        {{- $_ := set $vpath_data "upstream" $upstream }}
        {{- $_ := set $vpath_data "loadbalance" $loadbalance }}
        {{- $_ := set $vpath_data "keepalive" $keepalive }}
        {{- $_ := set $vhost_data.paths $path $vpath_data }}

        {{ $vhost_containers = concat $vhost_containers $vpath_containers }}
    {{- end }}

    {{- $userIdentifiedCert := groupByKeys $vhost_containers "Env.CERT_NAME" | first }}
    
    {{- $vhostCert := "" }}
    {{- if exists (printf "/etc/nginx/certs/%s.crt" $hostname) }}
        {{- $vhostCert = $hostname }}
    {{- end }}

    {{- $parentVhostCert := "" }}
    {{- if gt ($hostname | sprigSplit "." | len) 2 }}
        {{- $parentHostname := ($hostname | sprigSplitn "." 2)._1 }}
        {{- if exists (printf "/etc/nginx/certs/%s.crt" $parentHostname) }}
            {{- $parentVhostCert = $parentHostname }}
        {{- end }}
    {{- end }}
    
    {{- $trust_default_cert := groupByLabel $vhost_containers "com.github.nginx-proxy.nginx-proxy.trust-default-cert" | keys | first | default $globals.config.trust_default_cert | parseBool }}
    {{- $defaultCert := and $trust_default_cert $globals.config.default_cert_ok | ternary "default" "" }}
    
    {{- $cert := or $userIdentifiedCert $vhostCert $parentVhostCert $defaultCert }}
    {{- $cert_ok := and (ne $cert "") (exists (printf "/etc/nginx/certs/%s.crt" $cert)) (exists (printf "/etc/nginx/certs/%s.key" $cert)) }}

    {{- $enable_debug_endpoint := groupByLabel $vhost_containers "com.github.nginx-proxy.nginx-proxy.debug-endpoint" | keys | first | default $globals.config.enable_debug_endpoint | parseBool }}
    {{- $default := eq $globals.config.default_host $hostname }}
    {{- $https_method := groupByKeys $vhost_containers "Env.HTTPS_METHOD" | first | default $globals.config.https_method }}
    {{- $enable_http_on_missing_cert := groupByKeys $vhost_containers "Env.ENABLE_HTTP_ON_MISSING_CERT" | first | default $globals.config.enable_http_on_missing_cert | parseBool }}
    {{- /* When no trusted certs (default and/or vhost) are present we want to ensure that HTTP is enabled; hence switching from 'nohttp' or 'redirect' to 'noredirect' */}}
    {{- $https_method_disable_http := list "nohttp" "redirect" | has $https_method }}
    {{- if and $https_method_disable_http (not $cert_ok) $enable_http_on_missing_cert }}
        {{- $https_method = "noredirect" }}
    {{- end }}
    {{- $non_get_redirect := groupByLabel $vhost_containers "com.github.nginx-proxy.nginx-proxy.non-get-redirect" | keys | first | default $globals.config.non_get_redirect }}
    
    {{- $http2_enabled := groupByLabel $vhost_containers "com.github.nginx-proxy.nginx-proxy.http2.enable" | keys | first | default $globals.config.enable_http2 | parseBool }}
    {{- $http3_enabled := groupByLabel $vhost_containers "com.github.nginx-proxy.nginx-proxy.http3.enable" | keys | first | default $globals.config.enable_http3 | parseBool }}
    
    {{- $acme_http_challenge := groupByKeys $vhost_containers "Env.ACME_HTTP_CHALLENGE_LOCATION" | first | default $globals.config.acme_http_challenge }}
    {{- $acme_http_challenge_legacy := eq $acme_http_challenge "legacy" }}
    {{- $acme_http_challenge_enabled := false }}
    {{- if (not $acme_http_challenge_legacy) }}
        {{- $acme_http_challenge_enabled = parseBool $acme_http_challenge }}
    {{- end }}

    {{- /* Get the SERVER_TOKENS defined by containers w/ the same vhost, falling back to "". */}}
    {{- $server_tokens := groupByKeys $vhost_containers "Env.SERVER_TOKENS" | first | default "" | trim }}

    {{- /* Get the SSL_POLICY defined by containers w/ the same vhost, falling back to empty string (use default). */}}
    {{- $ssl_policy := groupByKeys $vhost_containers "Env.SSL_POLICY" | first | default "" }}

    {{- /* Get the HSTS defined by containers w/ the same vhost, falling back to "max-age=31536000". */}}
    {{- $hsts := groupByKeys $vhost_containers "Env.HSTS" | first | default $globals.config.hsts }}

    {{- /* Get the VIRTUAL_ROOT By containers w/ use fastcgi root */}}
    {{- $vhost_root := groupByKeys $vhost_containers "Env.VIRTUAL_ROOT" | first | default "/var/www/public" }}

    {{- $vhost_data = merge $vhost_data (dict
        "cert" $cert
        "cert_ok" $cert_ok
        "enable_debug_endpoint" $enable_debug_endpoint
        "default" $default
        "hsts" $hsts
        "https_method" $https_method
        "non_get_redirect" $non_get_redirect
        "http2_enabled" $http2_enabled
        "http3_enabled" $http3_enabled
        "is_regexp" $is_regexp
        "acme_http_challenge_legacy" $acme_http_challenge_legacy
        "acme_http_challenge_enabled" $acme_http_challenge_enabled
        "server_tokens" $server_tokens
        "ssl_policy" $ssl_policy
        "trust_default_cert" $trust_default_cert
        "upstream_name" $upstream_name
        "vhost_root" $vhost_root
    ) }}
    {{- $_ := set $globals.vhosts $hostname $vhost_data }}
{{- end }}